{"version":3,"file":"base.js","sourceRoot":"","sources":["base.ts"],"names":[],"mappings":"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","sourcesContent":["import { EnhancedStore } from '@reduxjs/toolkit';\nimport { format } from 'date-fns';\n\nconst origin = '';\nconst reconnectTimeout = 5000;\n\n// @ts-ignore\nconst messages = await import('./client/i18n/messages');\n\ntype DebounceCallbackFunction = () => void;\n\nlet timeout: number;\n\nconst debounce = (callback: DebounceCallbackFunction, debounceTime = 300) => {\n  window.clearTimeout(timeout);\n  timeout = window.setTimeout(callback, debounceTime);\n};\n\nconst dynMsg = (key: string): string => {\n  const message = messages.default[key];\n  if (!message) {\n    // eslint-disable-next-line no-console\n    console.warn(`Dynamic message not found: ${key}`);\n    return key;\n  }\n\n  return message;\n};\n\nconst formatDate = (\n  timestamp?: number | Date,\n  formatStr = 'dd.MM.yyyy'\n): string => (timestamp ? format(timestamp, formatStr) : '');\n\nconst formatDateTime = (\n  timestamp?: number | Date,\n  formatStr = 'dd.MM.yyyy HH:mm'\n): string => (timestamp ? format(timestamp, formatStr) : '');\n\nconst refreshToken = async (): Promise<void> => {\n  const response = await window.fetch('/refresh', {\n    method: 'post',\n  });\n\n  if (response.status !== 200) {\n    throw new Error(`${response.status}: ${response.statusText}`);\n  }\n};\n\nconst replay = async (\n  flowName: string,\n  name: string,\n  id: string\n): Promise<unknown> => {\n  const url = `${origin}/perform-replay/v2`;\n\n  const data = {\n    flowNames: [flowName],\n    aggregates: [\n      {\n        aggregateIdentifier: {\n          context: {\n            name: 'input',\n          },\n          aggregate: {\n            name,\n            id,\n          },\n        },\n        from: 1,\n        to: 1000,\n      },\n    ],\n  };\n\n  const response = await window.fetch(url, {\n    method: 'post',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(data),\n  });\n\n  if (response.status !== 200) {\n    throw new Error(response.statusText);\n  }\n\n  return response.json();\n};\n\nconst sendCommand = async (\n  aggregateName: string,\n  aggregateId: string,\n  name: string,\n  data?: any\n): Promise<any> => {\n  let url;\n\n  if (aggregateId) {\n    url = `${origin}/command/v2/input/${aggregateName}/${aggregateId}/${name}`;\n  } else {\n    url = `${origin}/command/v2/input/${aggregateName}/${name}`;\n  }\n\n  let response = await window.fetch(url, {\n    method: 'post',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(data),\n  });\n\n  if (response.status === 401) {\n    try {\n      await refreshToken();\n\n      response = await window.fetch(url, {\n        method: 'post',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(data),\n      });\n    } catch (e) {\n      // Router.go('/login');\n      window.location.pathname = '/login';\n      throw e;\n    }\n  }\n\n  if (response.status !== 200) {\n    throw new Error(`${response.status}: ${response.statusText}`);\n  }\n\n  return response.json();\n};\n\nconst queryView = async (\n  viewName: string,\n  query = 'all',\n  params?: { [key: string]: string }\n): Promise<any | any[]> => {\n  let url = '';\n\n  if (params) {\n    const parameters = Object.keys(params)\n      .map((key) => `${key}=${params[key]}`)\n      .join('&');\n    url = `${origin}/views/v2/${viewName}/value/${query}?${parameters}`;\n  } else {\n    url = `${origin}/views/v2/${viewName}/value/${query}`;\n  }\n\n  let response = await window.fetch(url);\n\n  if (response.status === 401) {\n    try {\n      await refreshToken();\n\n      response = await window.fetch(url);\n    } catch (e) {\n      // Router.go('/login');\n      window.location.pathname = '/login';\n      throw e;\n    }\n  }\n\n  if (response.status !== 200) {\n    throw new Error(`${response.status}: ${response.statusText}`);\n  }\n\n  return response.json();\n};\n\nconst parseNewlineDelimitedStream = (\n  stream: ReadableStream | null\n): ReadableStream => {\n  if (!stream) {\n    throw new Error('Stream is missing.');\n  }\n\n  let isCanceled = false;\n  let reader: ReadableStreamDefaultReader;\n\n  return new ReadableStream({\n    async start(controller) {\n      reader = stream.getReader();\n\n      const decoder = new window.TextDecoder();\n      let buffer = '';\n\n      for (;;) {\n        const { value, done } = (await reader.read()) as {\n          value: BufferSource;\n          done: boolean;\n        };\n\n        if (done) {\n          if (isCanceled) {\n            return;\n          }\n\n          buffer = buffer.trim();\n\n          if (buffer.length > 0) {\n            try {\n              const parsedLine = JSON.parse(buffer) as {\n                [key: string]: unknown;\n              };\n              // @ts-ignore\n              const processedLine = process(parsedLine);\n\n              if (processedLine.name !== 'heartbeat') {\n                controller.enqueue(processedLine);\n              }\n            } catch (ex) {\n              controller.error(ex);\n              return;\n            }\n          }\n\n          controller.close();\n          return;\n        }\n\n        const data = decoder.decode(value, { stream: true });\n        buffer += data;\n\n        const lines = buffer.split('\\n');\n\n        for (let i = 0; i < lines.length - 1; i += 1) {\n          const line = lines[i].trim();\n\n          if (line.length > 0) {\n            try {\n              const parsedLine = JSON.parse(line) as { [key: string]: unknown };\n\n              if (parsedLine.name !== 'heartbeat') {\n                controller.enqueue(parsedLine);\n              }\n            } catch (ex) {\n              isCanceled = true;\n              controller.error(ex);\n\n              reader.cancel();\n              return;\n            }\n          }\n        }\n\n        buffer = lines[lines.length - 1];\n      }\n    },\n\n    cancel() {\n      isCanceled = true;\n      return reader.cancel();\n    },\n  });\n};\n\nconst observeNotifications = async (store: EnhancedStore) => {\n  try {\n    const url = `${origin}/notifications/v2`;\n    const response = await window.fetch(url);\n\n    if (response.status !== 200) {\n      throw new Error(\n        `Failed to observe notification events. Unexpected status code '${response.status}'.`\n      );\n    }\n\n    const reader = parseNewlineDelimitedStream(response.body).getReader();\n\n    for (;;) {\n      const { value } = (await reader.read()) as {\n        value: { name: string; data: any };\n      };\n\n      store.dispatch({ type: value.name, payload: value.data });\n    }\n  } catch (ex) {\n    // eslint-disable-next-line no-console\n    console.info('Try to reconnect notification event stream in 5 seconds.');\n    setTimeout(() => observeNotifications(store), reconnectTimeout);\n  }\n};\n\nexport {\n  debounce,\n  dynMsg,\n  formatDate,\n  formatDateTime,\n  observeNotifications,\n  replay,\n  sendCommand,\n  queryView,\n};\n"]}