{"version":3,"file":"base.js","sourceRoot":"","sources":["base.ts"],"names":[],"mappings":"AAAA,OAAO,MAAM,MAAM,QAAQ,CAAC;AAE5B,aAAa;AACb,MAAM,QAAQ,GAAG,MAAM,MAAM,CAAC,wBAAwB,CAAC,CAAC;AAIxD,MAAM,QAAQ,GAAG,CAAC,QAAkC,EAAE,YAAY,GAAG,GAAG,EAAE,EAAE;IAC1E,IAAI,OAAe,CAAC;IACpB,OAAO,CAAC,KAAY,EAAE,EAAE;QACtB,IAAI,OAAO,EAAE;YACX,YAAY,CAAC,OAAO,CAAC,CAAC;SACvB;QAED,OAAO,GAAG,UAAU,CAAC,QAAQ,EAAE,YAAY,EAAE,KAAK,CAAC,CAAC;IACtD,CAAC,CAAC;AACJ,CAAC,CAAC;AAEF,MAAM,MAAM,GAAG,CAAC,GAAW,EAAU,EAAE;IACrC,MAAM,OAAO,GAAG,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;IACtC,IAAI,CAAC,OAAO,EAAE;QACZ,sCAAsC;QACtC,OAAO,CAAC,IAAI,CAAC,8BAA8B,GAAG,EAAE,CAAC,CAAC;QAClD,OAAO,GAAG,CAAC;KACZ;IAED,OAAO,OAAO,CAAC;AACjB,CAAC,CAAC;AAEF,MAAM,UAAU,GAAG,CAAC,SAAkB,EAAU,EAAE,CAChD,SAAS,CAAC,CAAC,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;AAE1D,MAAM,cAAc,GAAG,CAAC,SAAiB,EAAU,EAAE,CACnD,MAAM,CAAC,SAAS,CAAC,CAAC,MAAM,CAAC,kBAAkB,CAAC,CAAC;AAE/C,MAAM,aAAa,GAAG,CAAC,SAAkB,EAAE,MAAM,GAAG,YAAY,EAAU,EAAE,CAC1E,SAAS,CAAC,CAAC,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;AAEzE,OAAO,EAAE,QAAQ,EAAE,MAAM,EAAE,UAAU,EAAE,cAAc,EAAE,aAAa,EAAE,CAAC","sourcesContent":["import moment from 'moment';\n\n// @ts-ignore\nconst messages = await import('./client/i18n/messages');\n\ntype DebounceCallbackFunction = (event?: Event) => void;\n\nconst debounce = (callback: DebounceCallbackFunction, debounceTime = 300) => {\n  let timeout: number;\n  return (event: Event) => {\n    if (timeout) {\n      clearTimeout(timeout);\n    }\n\n    timeout = setTimeout(callback, debounceTime, event);\n  };\n};\n\nconst dynMsg = (key: string): string => {\n  const message = messages.default[key];\n  if (!message) {\n    // eslint-disable-next-line no-console\n    console.warn(`Dynamic message not found: ${key}`);\n    return key;\n  }\n\n  return message;\n};\n\nconst formatDate = (timestamp?: number): string =>\n  timestamp ? moment(timestamp).format('DD.MM.YYYY') : '';\n\nconst formatDateTime = (timestamp: number): string =>\n  moment(timestamp).format('DD.MM.YYYY HH:mm');\n\nconst getDateString = (timestamp?: number, format = 'YYYY-MM-DD'): string =>\n  timestamp ? moment(timestamp).format(format) : moment().format(format);\n\nexport { debounce, dynMsg, formatDate, formatDateTime, getDateString };\n"]}